{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "cities",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "window1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LatD as short,",
				"          { \"LatM\"} as short,",
				"          { \"LatS\"} as short,",
				"          { \"NS\"} as string,",
				"          { \"LonD\"} as short,",
				"          { \"LonM\"} as short,",
				"          { \"LonS\"} as short,",
				"          { \"EW\"} as string,",
				"          { \"City\"} as string,",
				"          { \"State\"} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          tamanho = LatD,",
				"          latitudade = { \"LatM\"},",
				"          { Longitude} = { \"LonD\"},",
				"          big = { \"NS\"},",
				"          { year} = { \"LonM\"},",
				"          { EW} = { \"EW\"},",
				"          { City} = { \"City\"},",
				"          { State} = { \"State\"}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter({ year} >= 20) ~> filter1",
				"filter1 derive(location = latitudade + { Longitude}) ~> derivedColumn1",
				"derivedColumn1 window(over({ City}),",
				"     asc(big, true),",
				"     location = rank()) ~> window1",
				"window1 aggregate(groupBy({ City}),",
				"     numberRowsByCity = count(),",
				"          maxLatitude = max(latitudade),",
				"          AvgTamanho = avg(tamanho)) ~> aggregate1",
				"aggregate1 alterRow(upsertIf(true())) ~> alterRow1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          { City},",
				"          numberRowsByCity,",
				"          maxLatitude,",
				"          AvgTamanho",
				"     )) ~> sink1"
			]
		}
	}
}